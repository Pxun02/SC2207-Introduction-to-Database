CREATE TABLE Person (
	Person_ID INT NOT NULL AUTO_INCREMENT,
	Name VARCHAR(30),
	Address VARCHAR(30),
	City VARCHAR(30),
	State VARCHAR(30),
	Zip VARCHAR(10),
	Schools VARCHAR(30),
	
	PRIMARY KEY (Person_ID)
);

CREATE TABLE Email (
	Person_ID INT NOT NULL AUTO_INCREMENT,
	Email VARCHAR(30),
	
	PRIMARY KEY (Person_ID),
	FOREIGN KEY (Person_ID) REFERENCES Person(Person_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Phone (
	Person_ID INT NOT NULL AUTO_INCREMENT,
	Phone VARCHAR(15),
	
	PRIMARY KEY (Person_ID),
	FOREIGN KEY (Person_ID) REFERENCES Person(Person_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Stakeholder (
	Stakeholder_ID INT NOT NULL AUTO_INCREMENT,
	Domain VARCHAR(50),
	
	PRIMARY KEY (Stakeholder_ID),
	FOREIGN KEY (Stakeholder_ID) REFERENCES Person(Person_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Comments_Suggestions (
	Date_Time DATETIME NOT NULL,
	Topic VARCHAR(30) NOT NULL,
	
	PRIMARY KEY (Date_Time, Topic)
);

CREATE TABLE Staff (
	Staff_ID INT NOT NULL AUTO_INCREMENT,
	Position VARCHAR(30),
	Date_Hired DATE,
	
	PRIMARY KEY (Staff_ID),
	FOREIGN KEY (Staff_ID) REFERENCES Person(Person_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Technical_Staff (
	Staff_ID INT NOT NULL AUTO_INCREMENT,
	Lab_Name VARCHAR(30),
	
	PRIMARY KEY (Staff_ID),
	FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Administrative_Staff (
	Staff_ID INT NOT NULL AUTO_INCREMENT,
	
	PRIMARY KEY (Staff_ID),
	FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Laboratory (
	Name VARCHAR(30) NOT NULL,
	School VARCHAR(30) NOT NULL,
	Location VARCHAR(30),
	isResearch VARCHAR(10),
	
	PRIMARY KEY (Name, School)
);

CREATE TABLE Equipment (
	Equipment_ID INT NOT NULL AUTO_INCREMENT,
	Name VARCHAR(30),
	Model_No INT,
	Date_Purchased DATE,
	Lab_Name VARCHAR(30),
	Lab_School VARCHAR(30),
	
	PRIMARY KEY (Equipment_ID)
);

CREATE TABLE Student (
	Student_ID INT NOT NULL AUTO_INCREMENT,
	Major VARCHAR(30),
	Minor VARCHAR(30),
	Admission_Date DATE,
	Graduate_Status VARCHAR(30),
	
	PRIMARY KEY (Student_ID),
	FOREIGN KEY (Student_ID) REFERENCES Person(Person_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Professor (
	Professor_ID INT NOT NULL AUTO_INCREMENT,
	Fields_Of_Experise VARCHAR(30),
	
	PRIMARY KEY (Professor_ID),
	FOREIGN KEY (Professor_ID) REFERENCES Person(Person_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Experiment (
	Experiment_ID INT NOT NULL AUTO_INCREMENT,
	Topic VARCHAR(30),
	Student_ID VARCHAR(30),
	Professor_ID VARCHAR(30),
	Experiment_Date DATE,
	
	PRIMARY KEY (Experiment_ID),
	FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (Professor_ID) REFERENCES Professor(Professor_ID)
		ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE Research_Topic (
	Research_ID INT NOT NULL AUTO_INCREMENT,
	Topic VARCHAR(30),
	Student_ID VARCHAR(30),
	Professor_ID VARCHAR(30),
	Academic_Year VARCHAR(10),
	
	FOREIGN KEY (Student_ID) REFERENCES Student(Student_ID)
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (Professor_ID) REFERENCES Professor(Professor_ID)
		ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE Course (
	Course_Code VARCHAR(10) NOT NULL,
	Course_Name VARCHAR(30),
	
	PRIMARY KEY (Course_Code)
);

CREATE TABLE Indexes (
	Index_ID INT NOT NULL AUTO_INCREMENT,
	Type VARCHAR(30),
	Group_Name VARCHAR(30),
	Date_Time DATETIME,
	Venue VARCHAR(30),
	
	PRIMARY KEY (Index_ID)
);

CREATE TABLE Index_List (
	Index_ID INT NOT NULL AUTO_INCREMENT,
	Course_ID VARCHAR(30) NOT NULL,
	
	PRIMARY KEY (Index_ID, Course_ID),
	FOREIGN KEY (Index_ID) REFERENCES Indexes(Index_ID)
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (Course_ID) REFERENCES Professor(Professor_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Timetable (
	Timetable_ID INT NOT NULL AUTO_INCREMENT,
	Person_ID INT NOT NULL AUTO_INCREMENT,
	Index_ID INT NOT NULL AUTO_INCREMENT,
	
	PRIMARY KEY (Timetable_ID, Person_ID, Index_ID),
	FOREIGN KEY (Person_ID) REFERENCES Person(Person_ID)
		ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (Index_ID) REFERENCES Indexes(Index_ID)
		ON DELETE CASCADE ON UPDATE CASCADE
);
